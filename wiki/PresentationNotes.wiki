#summary Notes regarding the algorithms, data structures, and sundry in jaigo for presentation.

= Presentation Slides =
[http://docs.google.com/PresentationEditor?id=dgk2kqwp_171cqpccwft Jaigo: Javascript-based Artificially Intelligent Go Opponent]

= Go =
  * Board (square grid, common sizes: 19, 13, 9)
  * Stones (signify control by a player of a grid position)
  * Liberties for c (unoccupied grid positions orthogonally adjacent to a stone of color c)
  * Chains (contiguous extents of stones of the same color)
  * Capture (the state of a chain with no liberties; captured chains are removed from the board)
  * Suicide (capturing your own chain)
  * Ko rule (no cycles shorter than 3 turns permitted)
  * Turn (pass or place a stone)

Objective: control more area or territory than opponent

zero-sum, perfect information, partisan (some moves are available to one player but not the other), deterministic strategy game

= Computer Go =
Search tree branching factory typically 150--250.
Endgames are PSPACE-hard.

== Known techniques ==
  * minimax (α-ß pruning, transposition tables, iterative deepening)
  * monte carlo
  * genetic algorithms
  * neural networks

== Current Issues ==
  * Finding a good evaluation function is hard. The human heuristics are vague, and when/how they get applied is even more vague.
  * fight between optimizing the main loop (evaluating the board) vs optimizing the small loops (given a board evaluation, local tricks to improve evaluation function). GNUGO v Go++
  * GA & NN seemed promising at first, but no commercial package uses them due to lack of speed.
  * If all old techniques are inadequate and new techniques don't pan out, whither computer go?

= JAIGO =

A javascript-based ai go agent.

== Platform/Language ==
Why javascript?
  * Professional interest
  * Widely-available
  * No current go engine
  * Runs on iPhone!

== Interaction/UI ==

Output in [http://www.lysator.liu.se/~gunnar/gtp/ GTP], so any GTP-compatible UI works. We are investigating two possible iPhone UI implementations. Current UI is a set of html input controls using GTP. 

== Scoring ==
The board is scored using [http://senseis.xmp.net/?BensonsAlgorithm Benson's Algorithm].

== Board representation ==
We have 3^361^ board states, perhaps 10^768^ games. Representing the board turns out to be the most difficult part of writing a go engine.

Zobrist hashing: (reduce xor (map f board-positions)), f: (x, y, color) -> Z

== Engine choice ==
Criteria: What is the engine with the smallest expression in javascript and the highest kyu ranking?

=== SimpleGo v1 ===
50kyu
greedy search (random move from list of moves with worst opponent score)
=== SimpleGO v3 ===
30kyu
a-b pruned search
=== Crawler ===
?? (~30kyu)
maintain line strength/shape
=== TinyGo ===
??

== Size ==
jaigo v1 ~76KB, unoptimized. ~36k, partially optimized.

== Speed ==
not yet measured.